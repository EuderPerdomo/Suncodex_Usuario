import * as i0 from '@angular/core';
import { TemplateRef, EventEmitter, booleanAttribute, numberAttribute, forwardRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, Output, NgModule, makeEnvironmentProviders } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT, NgIf, CommonModule } from '@angular/common';
import * as i2 from '@ng-util/lazy';

class TinymceOptions {
    constructor() {
        /** 指定tinymce目录路径，默认：`./assets/tinymce/` */
        this.baseURL = './assets/tinymce/';
        /** 指定tinymce文件名，默认：`tinymce.min.js` */
        this.fileName = 'tinymce.min.js';
    }
}

const isSSR = !(typeof document === 'object' && !!document);
/**
 * Angular for tinymce, You can modify the global configuration via `provideTinymce`
 */
class TinymceComponent {
    set disabled(value) {
        this._disabled = value;
        this.setDisabled();
    }
    set loading(value) {
        if (value instanceof TemplateRef) {
            this._loading = null;
            this._loadingTpl = value;
        }
        else {
            this._loading = value;
        }
    }
    get instance() {
        return this._instance;
    }
    _getWin() {
        return this.doc.defaultView || window;
    }
    constructor(defConfig, lazySrv, ngZone, doc, cd) {
        this.defConfig = defConfig;
        this.lazySrv = lazySrv;
        this.ngZone = ngZone;
        this.doc = doc;
        this.cd = cd;
        this.value = '';
        this.load = true;
        this.id = `_tinymce-${Math.random().toString(36).substring(2)}`;
        this.placeholder = '';
        this.inline = false;
        this._disabled = false;
        this._loading = null;
        this._loadingTpl = null;
        /** 延迟初始化 */
        this.delay = 0;
        this.ready = new EventEmitter();
    }
    initDelay() {
        if (isSSR) {
            return;
        }
        setTimeout(() => this.init(), Math.max(0, this.delay));
    }
    init() {
        const win = this._getWin();
        if (!win.tinymce) {
            throw new Error('tinymce js文件加载失败');
        }
        const { defConfig, config, id, inline } = this;
        if (this._instance) {
            return;
        }
        if (defConfig?.baseURL) {
            let url = '' + defConfig.baseURL;
            if (url.endsWith('/')) {
                url = url.substring(0, url.length - 1);
            }
            win.tinymce.baseURL = url;
        }
        const userOptions = { ...defConfig?.config, ...config };
        const options = {
            selector: `#` + id,
            inline,
            ...defConfig?.config,
            ...config,
            setup: (editor) => {
                this._instance = editor;
                if (this.onChange) {
                    editor.on('change keyup', () => {
                        this.value = editor.getContent();
                        this.ngZone.run(() => this.onChange(this.value));
                    });
                }
                if (typeof userOptions.setup === 'function') {
                    userOptions.setup(editor);
                }
            },
            init_instance_callback: (editor) => {
                if (editor && this.value) {
                    editor.setContent(this.value);
                }
                this.setDisabled();
                if (typeof userOptions.init_instance_callback === 'function') {
                    userOptions.init_instance_callback(editor);
                }
                this.ready.emit(editor);
            },
        };
        if (userOptions.auto_focus) {
            options.auto_focus = id;
        }
        this.ngZone.runOutsideAngular(() => win.tinymce.init(options));
        this.load = false;
        this.cd.detectChanges();
    }
    destroy() {
        if (this._instance == null) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this._instance.off();
            this._instance.remove();
        });
        this._instance = null;
    }
    setDisabled() {
        if (!this._instance) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            const mode = this._disabled ? 'readonly' : 'design';
            // Compatible with 5
            const setMode5 = this._instance.setMode;
            if (typeof setMode5 === 'function') {
                setMode5(mode);
            }
            else {
                this._instance.mode.set(mode);
            }
        });
    }
    ngAfterViewInit() {
        if (isSSR) {
            return;
        }
        // 已经存在对象无须进入懒加载模式
        if (this._getWin().tinymce) {
            this.initDelay();
            return;
        }
        const { defConfig } = this;
        const baseURL = defConfig && defConfig.baseURL;
        const fileName = defConfig && defConfig.fileName;
        const url = (baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js');
        this.lazySrv.monitor(url).subscribe(() => this.initDelay());
        this.lazySrv.load(url);
    }
    ngOnChanges(changes) {
        if (this._instance && changes.config) {
            this.destroy();
            this.initDelay();
        }
    }
    ngOnDestroy() {
        this.destroy();
    }
    writeValue(value) {
        // value should be NOT NULL
        this.value = value || '';
        if (this._instance) {
            this.ngZone.runOutsideAngular(() => this._instance.setContent(this.value));
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TinymceComponent, deps: [{ token: TinymceOptions, optional: true }, { token: i2.NuLazyService }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.0.3", type: TinymceComponent, isStandalone: true, selector: "tinymce", inputs: { config: "config", placeholder: "placeholder", inline: ["inline", "inline", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], loading: "loading", delay: ["delay", "delay", numberAttribute] }, outputs: { ready: "ready" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TinymceComponent),
                multi: true,
            },
        ], exportAs: ["tinymce"], usesOnChanges: true, ngImport: i0, template: `
    <textarea *ngIf="!inline" [attr.id]="id" [attr.placeholder]="placeholder" class="tinymce-selector"></textarea>
    <div *ngIf="inline" [attr.id]="id"><ng-content></ng-content></div>
    <div class="loading" *ngIf="load">
      <ng-container *ngIf="_loading; else _loadingTpl">{{ _loading }}</ng-container>
    </div>
  `, isInline: true, styles: ["tinymce .tinymce-selector{display:none}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TinymceComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tinymce', exportAs: 'tinymce', template: `
    <textarea *ngIf="!inline" [attr.id]="id" [attr.placeholder]="placeholder" class="tinymce-selector"></textarea>
    <div *ngIf="inline" [attr.id]="id"><ng-content></ng-content></div>
    <div class="loading" *ngIf="load">
      <ng-container *ngIf="_loading; else _loadingTpl">{{ _loading }}</ng-container>
    </div>
  `, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TinymceComponent),
                            multi: true,
                        },
                    ], preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgIf], styles: ["tinymce .tinymce-selector{display:none}\n"] }]
        }], ctorParameters: () => [{ type: TinymceOptions, decorators: [{
                    type: Optional
                }] }, { type: i2.NuLazyService }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { config: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], inline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], loading: [{
                type: Input
            }], delay: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], ready: [{
                type: Output
            }] } });

class NgxTinymceModule {
    static forRoot(options) {
        return {
            ngModule: NgxTinymceModule,
            providers: [{ provide: TinymceOptions, useValue: options }],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxTinymceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: NgxTinymceModule, imports: [CommonModule, TinymceComponent], exports: [TinymceComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxTinymceModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxTinymceModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TinymceComponent],
                    exports: [TinymceComponent],
                }]
        }] });

/**
 * Sets up providers necessary to config for the Tinymce.
 * @example
 * bootstrapApplication(AppComponent, {
 *   providers: [provideTinymce({baseURL: '//cdn.tiny.cloud/1/no-api-key/tinymce/6/'})]
 * });
 */
function provideTinymce(options) {
    return makeEnvironmentProviders([{ provide: TinymceOptions, useValue: options }]);
}

/**
 * Generated bundle index. Do not edit.
 */

export { NgxTinymceModule, TinymceComponent, TinymceOptions, provideTinymce };
//# sourceMappingURL=ngx-tinymce.mjs.map
