import { OnChanges, OnDestroy, AfterViewInit, ChangeDetectorRef, TemplateRef, SimpleChanges, EventEmitter, NgZone, SimpleChange } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NuLazyService } from '@ng-util/lazy';
import type { Editor as TinyMCEEditor, RawEditorOptions } from 'tinymce';
import { TinymceOptions } from './tinymce.options';
import * as i0 from "@angular/core";
/**
 * Angular for tinymce, You can modify the global configuration via `provideTinymce`
 */
export declare class TinymceComponent implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {
    private defConfig;
    private lazySrv;
    private ngZone;
    private doc;
    private cd;
    private _instance?;
    private value;
    load: boolean;
    id: string;
    private onChange;
    private onTouched;
    config?: RawEditorOptions | null;
    placeholder: string;
    inline: boolean;
    set disabled(value: boolean);
    private _disabled;
    _loading: string | null;
    _loadingTpl: TemplateRef<any> | null;
    set loading(value: string | TemplateRef<any>);
    /** 延迟初始化 */
    delay: number;
    ready: EventEmitter<TinyMCEEditor>;
    get instance(): TinyMCEEditor | undefined | null;
    private _getWin;
    constructor(defConfig: TinymceOptions, lazySrv: NuLazyService, ngZone: NgZone, doc: any, cd: ChangeDetectorRef);
    private initDelay;
    private init;
    private destroy;
    private setDisabled;
    ngAfterViewInit(): void;
    ngOnChanges(changes: {
        [P in keyof this]?: SimpleChange;
    } & SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(value: string): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TinymceComponent, [{ optional: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TinymceComponent, "tinymce", ["tinymce"], { "config": { "alias": "config"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "inline": { "alias": "inline"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; }, { "ready": "ready"; }, never, ["*"], true, never>;
    static ngAcceptInputType_inline: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_delay: unknown;
}
