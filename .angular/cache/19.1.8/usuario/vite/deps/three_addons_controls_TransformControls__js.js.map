{
  "version": 3,
  "sources": ["../../../../../../node_modules/three/examples/jsm/controls/TransformControls.js"],
  "sourcesContent": ["import { BoxGeometry, BufferGeometry, CylinderGeometry, DoubleSide, Euler, Float32BufferAttribute, Line, LineBasicMaterial, Matrix4, Mesh, MeshBasicMaterial, Object3D, OctahedronGeometry, PlaneGeometry, Quaternion, Raycaster, SphereGeometry, TorusGeometry, Vector3 } from 'three';\nconst _raycaster = new Raycaster();\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n  X: new Vector3(1, 0, 0),\n  Y: new Vector3(0, 1, 0),\n  Z: new Vector3(0, 0, 1)\n};\nconst _changeEvent = {\n  type: 'change'\n};\nconst _mouseDownEvent = {\n  type: 'mouseDown',\n  mode: null\n};\nconst _mouseUpEvent = {\n  type: 'mouseUp',\n  mode: null\n};\nconst _objectChangeEvent = {\n  type: 'objectChange'\n};\nclass TransformControls extends Object3D {\n  constructor(camera, domElement) {\n    super();\n    if (domElement === undefined) {\n      console.warn('THREE.TransformControls: The second parameter \"domElement\" is now mandatory.');\n      domElement = document;\n    }\n    this.isTransformControls = true;\n    this.visible = false;\n    this.domElement = domElement;\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n    const _gizmo = new TransformControlsGizmo();\n    this._gizmo = _gizmo;\n    this.add(_gizmo);\n    const _plane = new TransformControlsPlane();\n    this._plane = _plane;\n    this.add(_plane);\n    const scope = this;\n\n    // Defined getter, setter and store for a property\n    function defineProperty(propName, defaultValue) {\n      let propValue = defaultValue;\n      Object.defineProperty(scope, propName, {\n        get: function () {\n          return propValue !== undefined ? propValue : defaultValue;\n        },\n        set: function (value) {\n          if (propValue !== value) {\n            propValue = value;\n            _plane[propName] = value;\n            _gizmo[propName] = value;\n            scope.dispatchEvent({\n              type: propName + '-changed',\n              value: value\n            });\n            scope.dispatchEvent(_changeEvent);\n          }\n        }\n      });\n      scope[propName] = defaultValue;\n      _plane[propName] = defaultValue;\n      _gizmo[propName] = defaultValue;\n    }\n\n    // Define properties with getters/setter\n    // Setting the defined property will automatically trigger change event\n    // Defined properties are passed down to gizmo and plane\n\n    defineProperty('camera', camera);\n    defineProperty('object', undefined);\n    defineProperty('enabled', true);\n    defineProperty('axis', null);\n    defineProperty('mode', 'translate');\n    defineProperty('translationSnap', null);\n    defineProperty('rotationSnap', null);\n    defineProperty('scaleSnap', null);\n    defineProperty('space', 'world');\n    defineProperty('size', 1);\n    defineProperty('dragging', false);\n    defineProperty('showX', true);\n    defineProperty('showY', true);\n    defineProperty('showZ', true);\n\n    // Reusable utility variables\n\n    const worldPosition = new Vector3();\n    const worldPositionStart = new Vector3();\n    const worldQuaternion = new Quaternion();\n    const worldQuaternionStart = new Quaternion();\n    const cameraPosition = new Vector3();\n    const cameraQuaternion = new Quaternion();\n    const pointStart = new Vector3();\n    const pointEnd = new Vector3();\n    const rotationAxis = new Vector3();\n    const rotationAngle = 0;\n    const eye = new Vector3();\n\n    // TODO: remove properties unused in plane and gizmo\n\n    defineProperty('worldPosition', worldPosition);\n    defineProperty('worldPositionStart', worldPositionStart);\n    defineProperty('worldQuaternion', worldQuaternion);\n    defineProperty('worldQuaternionStart', worldQuaternionStart);\n    defineProperty('cameraPosition', cameraPosition);\n    defineProperty('cameraQuaternion', cameraQuaternion);\n    defineProperty('pointStart', pointStart);\n    defineProperty('pointEnd', pointEnd);\n    defineProperty('rotationAxis', rotationAxis);\n    defineProperty('rotationAngle', rotationAngle);\n    defineProperty('eye', eye);\n    this._offset = new Vector3();\n    this._startNorm = new Vector3();\n    this._endNorm = new Vector3();\n    this._cameraScale = new Vector3();\n    this._parentPosition = new Vector3();\n    this._parentQuaternion = new Quaternion();\n    this._parentQuaternionInv = new Quaternion();\n    this._parentScale = new Vector3();\n    this._worldScaleStart = new Vector3();\n    this._worldQuaternionInv = new Quaternion();\n    this._worldScale = new Vector3();\n    this._positionStart = new Vector3();\n    this._quaternionStart = new Quaternion();\n    this._scaleStart = new Vector3();\n    this._getPointer = getPointer.bind(this);\n    this._onPointerDown = onPointerDown.bind(this);\n    this._onPointerHover = onPointerHover.bind(this);\n    this._onPointerMove = onPointerMove.bind(this);\n    this._onPointerUp = onPointerUp.bind(this);\n    this.domElement.addEventListener('pointerdown', this._onPointerDown);\n    this.domElement.addEventListener('pointermove', this._onPointerHover);\n    this.domElement.addEventListener('pointerup', this._onPointerUp);\n  }\n\n  // updateMatrixWorld updates key transformation variables\n  updateMatrixWorld(force) {\n    if (this.object !== undefined) {\n      this.object.updateMatrixWorld();\n      if (this.object.parent === null) {\n        console.error('TransformControls: The attached 3D object must be a part of the scene graph.');\n      } else {\n        this.object.parent.matrixWorld.decompose(this._parentPosition, this._parentQuaternion, this._parentScale);\n      }\n      this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this._worldScale);\n      this._parentQuaternionInv.copy(this._parentQuaternion).invert();\n      this._worldQuaternionInv.copy(this.worldQuaternion).invert();\n    }\n    this.camera.updateMatrixWorld();\n    this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this._cameraScale);\n    if (this.camera.isOrthographicCamera) {\n      this.camera.getWorldDirection(this.eye).negate();\n    } else {\n      this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize();\n    }\n    super.updateMatrixWorld(force);\n  }\n  pointerHover(pointer) {\n    if (this.object === undefined || this.dragging === true) return;\n    if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);\n    const intersect = intersectObjectWithRay(this._gizmo.picker[this.mode], _raycaster);\n    if (intersect) {\n      this.axis = intersect.object.name;\n    } else {\n      this.axis = null;\n    }\n  }\n  pointerDown(pointer) {\n    if (this.object === undefined || this.dragging === true || pointer != null && pointer.button !== 0) return;\n    if (this.axis !== null) {\n      if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);\n      const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);\n      if (planeIntersect) {\n        this.object.updateMatrixWorld();\n        this.object.parent.updateMatrixWorld();\n        this._positionStart.copy(this.object.position);\n        this._quaternionStart.copy(this.object.quaternion);\n        this._scaleStart.copy(this.object.scale);\n        this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart);\n        this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart);\n      }\n      this.dragging = true;\n      _mouseDownEvent.mode = this.mode;\n      this.dispatchEvent(_mouseDownEvent);\n    }\n  }\n  pointerMove(pointer) {\n    const axis = this.axis;\n    const mode = this.mode;\n    const object = this.object;\n    let space = this.space;\n    if (mode === 'scale') {\n      space = 'local';\n    } else if (axis === 'E' || axis === 'XYZE' || axis === 'XYZ') {\n      space = 'world';\n    }\n    if (object === undefined || axis === null || this.dragging === false || pointer !== null && pointer.button !== -1) return;\n    if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);\n    const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);\n    if (!planeIntersect) return;\n    this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart);\n    if (mode === 'translate') {\n      // Apply translate\n\n      this._offset.copy(this.pointEnd).sub(this.pointStart);\n      if (space === 'local' && axis !== 'XYZ') {\n        this._offset.applyQuaternion(this._worldQuaternionInv);\n      }\n      if (axis.indexOf('X') === -1) this._offset.x = 0;\n      if (axis.indexOf('Y') === -1) this._offset.y = 0;\n      if (axis.indexOf('Z') === -1) this._offset.z = 0;\n      if (space === 'local' && axis !== 'XYZ') {\n        this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale);\n      } else {\n        this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale);\n      }\n      object.position.copy(this._offset).add(this._positionStart);\n\n      // Apply translation snap\n\n      if (this.translationSnap) {\n        if (space === 'local') {\n          object.position.applyQuaternion(_tempQuaternion.copy(this._quaternionStart).invert());\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n          }\n          object.position.applyQuaternion(this._quaternionStart);\n        }\n        if (space === 'world') {\n          if (object.parent) {\n            object.position.add(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n          }\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n          }\n          if (object.parent) {\n            object.position.sub(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n          }\n        }\n      }\n    } else if (mode === 'scale') {\n      if (axis.search('XYZ') !== -1) {\n        let d = this.pointEnd.length() / this.pointStart.length();\n        if (this.pointEnd.dot(this.pointStart) < 0) d *= -1;\n        _tempVector2.set(d, d, d);\n      } else {\n        _tempVector.copy(this.pointStart);\n        _tempVector2.copy(this.pointEnd);\n        _tempVector.applyQuaternion(this._worldQuaternionInv);\n        _tempVector2.applyQuaternion(this._worldQuaternionInv);\n        _tempVector2.divide(_tempVector);\n        if (axis.search('X') === -1) {\n          _tempVector2.x = 1;\n        }\n        if (axis.search('Y') === -1) {\n          _tempVector2.y = 1;\n        }\n        if (axis.search('Z') === -1) {\n          _tempVector2.z = 1;\n        }\n      }\n\n      // Apply scale\n\n      object.scale.copy(this._scaleStart).multiply(_tempVector2);\n      if (this.scaleSnap) {\n        if (axis.search('X') !== -1) {\n          object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n        }\n        if (axis.search('Y') !== -1) {\n          object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n        }\n        if (axis.search('Z') !== -1) {\n          object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n        }\n      }\n    } else if (mode === 'rotate') {\n      this._offset.copy(this.pointEnd).sub(this.pointStart);\n      const ROTATION_SPEED = 20 / this.worldPosition.distanceTo(_tempVector.setFromMatrixPosition(this.camera.matrixWorld));\n      let _inPlaneRotation = false;\n      if (axis === 'XYZE') {\n        this.rotationAxis.copy(this._offset).cross(this.eye).normalize();\n        this.rotationAngle = this._offset.dot(_tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED;\n      } else if (axis === 'X' || axis === 'Y' || axis === 'Z') {\n        this.rotationAxis.copy(_unit[axis]);\n        _tempVector.copy(_unit[axis]);\n        if (space === 'local') {\n          _tempVector.applyQuaternion(this.worldQuaternion);\n        }\n        _tempVector.cross(this.eye);\n\n        // When _tempVector is 0 after cross with this.eye the vectors are parallel and should use in-plane rotation logic.\n        if (_tempVector.length() === 0) {\n          _inPlaneRotation = true;\n        } else {\n          this.rotationAngle = this._offset.dot(_tempVector.normalize()) * ROTATION_SPEED;\n        }\n      }\n      if (axis === 'E' || _inPlaneRotation) {\n        this.rotationAxis.copy(this.eye);\n        this.rotationAngle = this.pointEnd.angleTo(this.pointStart);\n        this._startNorm.copy(this.pointStart).normalize();\n        this._endNorm.copy(this.pointEnd).normalize();\n        this.rotationAngle *= this._endNorm.cross(this._startNorm).dot(this.eye) < 0 ? 1 : -1;\n      }\n\n      // Apply rotation snap\n\n      if (this.rotationSnap) this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap;\n\n      // Apply rotate\n      if (space === 'local' && axis !== 'E' && axis !== 'XYZE') {\n        object.quaternion.copy(this._quaternionStart);\n        object.quaternion.multiply(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle)).normalize();\n      } else {\n        this.rotationAxis.applyQuaternion(this._parentQuaternionInv);\n        object.quaternion.copy(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle));\n        object.quaternion.multiply(this._quaternionStart).normalize();\n      }\n    }\n    this.dispatchEvent(_changeEvent);\n    this.dispatchEvent(_objectChangeEvent);\n  }\n  pointerUp(pointer) {\n    if (pointer !== null && pointer.button !== 0) return;\n    if (this.dragging && this.axis !== null) {\n      _mouseUpEvent.mode = this.mode;\n      this.dispatchEvent(_mouseUpEvent);\n    }\n    this.dragging = false;\n    this.axis = null;\n  }\n  dispose() {\n    this.domElement.removeEventListener('pointerdown', this._onPointerDown);\n    this.domElement.removeEventListener('pointermove', this._onPointerHover);\n    this.domElement.removeEventListener('pointermove', this._onPointerMove);\n    this.domElement.removeEventListener('pointerup', this._onPointerUp);\n    this.traverse(function (child) {\n      if (child.geometry) child.geometry.dispose();\n      if (child.material) child.material.dispose();\n    });\n  }\n\n  // Set current object\n  attach(object) {\n    this.object = object;\n    this.visible = true;\n    return this;\n  }\n\n  // Detach from object\n  detach() {\n    this.object = undefined;\n    this.visible = false;\n    this.axis = null;\n    return this;\n  }\n  reset() {\n    if (!this.enabled) return;\n    if (this.dragging) {\n      this.object.position.copy(this._positionStart);\n      this.object.quaternion.copy(this._quaternionStart);\n      this.object.scale.copy(this._scaleStart);\n      this.dispatchEvent(_changeEvent);\n      this.dispatchEvent(_objectChangeEvent);\n      this.pointStart.copy(this.pointEnd);\n    }\n  }\n  getRaycaster() {\n    return _raycaster;\n  }\n\n  // TODO: deprecate\n\n  getMode() {\n    return this.mode;\n  }\n  setMode(mode) {\n    this.mode = mode;\n  }\n  setTranslationSnap(translationSnap) {\n    this.translationSnap = translationSnap;\n  }\n  setRotationSnap(rotationSnap) {\n    this.rotationSnap = rotationSnap;\n  }\n  setScaleSnap(scaleSnap) {\n    this.scaleSnap = scaleSnap;\n  }\n  setSize(size) {\n    this.size = size;\n  }\n  setSpace(space) {\n    this.space = space;\n  }\n}\n\n// mouse / touch event handlers\n\nfunction getPointer(event) {\n  if (this.domElement.ownerDocument.pointerLockElement) {\n    return {\n      x: 0,\n      y: 0,\n      button: event.button\n    };\n  } else {\n    const rect = this.domElement.getBoundingClientRect();\n    return {\n      x: (event.clientX - rect.left) / rect.width * 2 - 1,\n      y: -(event.clientY - rect.top) / rect.height * 2 + 1,\n      button: event.button\n    };\n  }\n}\nfunction onPointerHover(event) {\n  if (!this.enabled) return;\n  switch (event.pointerType) {\n    case 'mouse':\n    case 'pen':\n      this.pointerHover(this._getPointer(event));\n      break;\n  }\n}\nfunction onPointerDown(event) {\n  if (!this.enabled) return;\n  if (!document.pointerLockElement) {\n    this.domElement.setPointerCapture(event.pointerId);\n  }\n  this.domElement.addEventListener('pointermove', this._onPointerMove);\n  this.pointerHover(this._getPointer(event));\n  this.pointerDown(this._getPointer(event));\n}\nfunction onPointerMove(event) {\n  if (!this.enabled) return;\n  this.pointerMove(this._getPointer(event));\n}\nfunction onPointerUp(event) {\n  if (!this.enabled) return;\n  this.domElement.releasePointerCapture(event.pointerId);\n  this.domElement.removeEventListener('pointermove', this._onPointerMove);\n  this.pointerUp(this._getPointer(event));\n}\nfunction intersectObjectWithRay(object, raycaster, includeInvisible) {\n  const allIntersections = raycaster.intersectObject(object, true);\n  for (let i = 0; i < allIntersections.length; i++) {\n    if (allIntersections[i].object.visible || includeInvisible) {\n      return allIntersections[i];\n    }\n  }\n  return false;\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3(0, 1, 0);\nconst _zeroVector = new Vector3(0, 0, 0);\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\nconst _unitX = new Vector3(1, 0, 0);\nconst _unitY = new Vector3(0, 1, 0);\nconst _unitZ = new Vector3(0, 0, 1);\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\nclass TransformControlsGizmo extends Object3D {\n  constructor() {\n    super();\n    this.isTransformControlsGizmo = true;\n    this.type = 'TransformControlsGizmo';\n\n    // shared materials\n\n    const gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      fog: false,\n      toneMapped: false,\n      transparent: true\n    });\n    const gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      fog: false,\n      toneMapped: false,\n      transparent: true\n    });\n\n    // Make unique material for each axis/color\n\n    const matInvisible = gizmoMaterial.clone();\n    matInvisible.opacity = 0.15;\n    const matHelper = gizmoLineMaterial.clone();\n    matHelper.opacity = 0.5;\n    const matRed = gizmoMaterial.clone();\n    matRed.color.setHex(0xff0000);\n    const matGreen = gizmoMaterial.clone();\n    matGreen.color.setHex(0x00ff00);\n    const matBlue = gizmoMaterial.clone();\n    matBlue.color.setHex(0x0000ff);\n    const matRedTransparent = gizmoMaterial.clone();\n    matRedTransparent.color.setHex(0xff0000);\n    matRedTransparent.opacity = 0.5;\n    const matGreenTransparent = gizmoMaterial.clone();\n    matGreenTransparent.color.setHex(0x00ff00);\n    matGreenTransparent.opacity = 0.5;\n    const matBlueTransparent = gizmoMaterial.clone();\n    matBlueTransparent.color.setHex(0x0000ff);\n    matBlueTransparent.opacity = 0.5;\n    const matWhiteTransparent = gizmoMaterial.clone();\n    matWhiteTransparent.opacity = 0.25;\n    const matYellowTransparent = gizmoMaterial.clone();\n    matYellowTransparent.color.setHex(0xffff00);\n    matYellowTransparent.opacity = 0.25;\n    const matYellow = gizmoMaterial.clone();\n    matYellow.color.setHex(0xffff00);\n    const matGray = gizmoMaterial.clone();\n    matGray.color.setHex(0x787878);\n\n    // reusable geometry\n\n    const arrowGeometry = new CylinderGeometry(0, 0.04, 0.1, 12);\n    arrowGeometry.translate(0, 0.05, 0);\n    const scaleHandleGeometry = new BoxGeometry(0.08, 0.08, 0.08);\n    scaleHandleGeometry.translate(0, 0.04, 0);\n    const lineGeometry = new BufferGeometry();\n    lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));\n    const lineGeometry2 = new CylinderGeometry(0.0075, 0.0075, 0.5, 3);\n    lineGeometry2.translate(0, 0.25, 0);\n    function CircleGeometry(radius, arc) {\n      const geometry = new TorusGeometry(radius, 0.0075, 3, 64, arc * Math.PI * 2);\n      geometry.rotateY(Math.PI / 2);\n      geometry.rotateX(Math.PI / 2);\n      return geometry;\n    }\n\n    // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n    function TranslateHelperGeometry() {\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));\n      return geometry;\n    }\n\n    // Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n    const gizmoTranslate = {\n      X: [[new Mesh(arrowGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(arrowGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]], [new Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(arrowGeometry, matGreen), [0, 0.5, 0]], [new Mesh(arrowGeometry, matGreen), [0, -0.5, 0], [Math.PI, 0, 0]], [new Mesh(lineGeometry2, matGreen)]],\n      Z: [[new Mesh(arrowGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new Mesh(arrowGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]], [new Mesh(lineGeometry2, matBlue), null, [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0]]],\n      XY: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent.clone()), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matRedTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent.clone()), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n    };\n    const pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0.3, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [-0.3, 0, 0], [0, 0, Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0.3, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, -0.3, 0], [0, 0, Math.PI]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, 0.3], [Math.PI / 2, 0, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, -0.3], [-Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n    };\n    const helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, 'helper']],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']]\n    };\n    const gizmoRotate = {\n      XYZE: [[new Mesh(CircleGeometry(0.5, 1), matGray), null, [0, Math.PI / 2, 0]]],\n      X: [[new Mesh(CircleGeometry(0.5, 0.5), matRed)]],\n      Y: [[new Mesh(CircleGeometry(0.5, 0.5), matGreen), null, [0, 0, -Math.PI / 2]]],\n      Z: [[new Mesh(CircleGeometry(0.5, 0.5), matBlue), null, [0, Math.PI / 2, 0]]],\n      E: [[new Mesh(CircleGeometry(0.75, 1), matYellowTransparent), null, [0, Math.PI / 2, 0]]]\n    };\n    const helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']]\n    };\n    const pickerRotate = {\n      XYZE: [[new Mesh(new SphereGeometry(0.25, 10, 8), matInvisible)]],\n      X: [[new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(0.75, 0.1, 2, 24), matInvisible)]]\n    };\n    const gizmoScale = {\n      X: [[new Mesh(scaleHandleGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(scaleHandleGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]]],\n      Y: [[new Mesh(scaleHandleGeometry, matGreen), [0, 0.5, 0]], [new Mesh(lineGeometry2, matGreen)], [new Mesh(scaleHandleGeometry, matGreen), [0, -0.5, 0], [0, 0, Math.PI]]],\n      Z: [[new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new Mesh(lineGeometry2, matBlue), [0, 0, 0], [Math.PI / 2, 0, 0]], [new Mesh(scaleHandleGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matRedTransparent), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new BoxGeometry(0.1, 0.1, 0.1), matWhiteTransparent.clone())]]\n    };\n    const pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0.3, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [-0.3, 0, 0], [0, 0, Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0.3, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, -0.3, 0], [0, 0, Math.PI]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, 0.3], [Math.PI / 2, 0, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, -0.3], [-Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 0]]]\n    };\n    const helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']]\n    };\n\n    // Creates an Object3D with gizmos described in custom hierarchy definition.\n\n    function setupGizmo(gizmoMap) {\n      const gizmo = new Object3D();\n      for (const name in gizmoMap) {\n        for (let i = gizmoMap[name].length; i--;) {\n          const object = gizmoMap[name][i][0].clone();\n          const position = gizmoMap[name][i][1];\n          const rotation = gizmoMap[name][i][2];\n          const scale = gizmoMap[name][i][3];\n          const tag = gizmoMap[name][i][4];\n\n          // name and tag properties are essential for picking and updating logic.\n          object.name = name;\n          object.tag = tag;\n          if (position) {\n            object.position.set(position[0], position[1], position[2]);\n          }\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2]);\n          }\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2]);\n          }\n          object.updateMatrix();\n          const tempGeometry = object.geometry.clone();\n          tempGeometry.applyMatrix4(object.matrix);\n          object.geometry = tempGeometry;\n          object.renderOrder = Infinity;\n          object.position.set(0, 0, 0);\n          object.rotation.set(0, 0, 0);\n          object.scale.set(1, 1, 1);\n          gizmo.add(object);\n        }\n      }\n      return gizmo;\n    }\n\n    // Gizmo creation\n\n    this.gizmo = {};\n    this.picker = {};\n    this.helper = {};\n    this.add(this.gizmo['translate'] = setupGizmo(gizmoTranslate));\n    this.add(this.gizmo['rotate'] = setupGizmo(gizmoRotate));\n    this.add(this.gizmo['scale'] = setupGizmo(gizmoScale));\n    this.add(this.picker['translate'] = setupGizmo(pickerTranslate));\n    this.add(this.picker['rotate'] = setupGizmo(pickerRotate));\n    this.add(this.picker['scale'] = setupGizmo(pickerScale));\n    this.add(this.helper['translate'] = setupGizmo(helperTranslate));\n    this.add(this.helper['rotate'] = setupGizmo(helperRotate));\n    this.add(this.helper['scale'] = setupGizmo(helperScale));\n\n    // Pickers should be hidden always\n\n    this.picker['translate'].visible = false;\n    this.picker['rotate'].visible = false;\n    this.picker['scale'].visible = false;\n  }\n\n  // updateMatrixWorld will update transformations and appearance of individual handles\n\n  updateMatrixWorld(force) {\n    const space = this.mode === 'scale' ? 'local' : this.space; // scale always oriented to local rotation\n\n    const quaternion = space === 'local' ? this.worldQuaternion : _identityQuaternion;\n\n    // Show only gizmos for current transform mode\n\n    this.gizmo['translate'].visible = this.mode === 'translate';\n    this.gizmo['rotate'].visible = this.mode === 'rotate';\n    this.gizmo['scale'].visible = this.mode === 'scale';\n    this.helper['translate'].visible = this.mode === 'translate';\n    this.helper['rotate'].visible = this.mode === 'rotate';\n    this.helper['scale'].visible = this.mode === 'scale';\n    let handles = [];\n    handles = handles.concat(this.picker[this.mode].children);\n    handles = handles.concat(this.gizmo[this.mode].children);\n    handles = handles.concat(this.helper[this.mode].children);\n    for (let i = 0; i < handles.length; i++) {\n      const handle = handles[i];\n\n      // hide aligned to camera\n\n      handle.visible = true;\n      handle.rotation.set(0, 0, 0);\n      handle.position.copy(this.worldPosition);\n      let factor;\n      if (this.camera.isOrthographicCamera) {\n        factor = (this.camera.top - this.camera.bottom) / this.camera.zoom;\n      } else {\n        factor = this.worldPosition.distanceTo(this.cameraPosition) * Math.min(1.9 * Math.tan(Math.PI * this.camera.fov / 360) / this.camera.zoom, 7);\n      }\n      handle.scale.set(1, 1, 1).multiplyScalar(factor * this.size / 4);\n\n      // TODO: simplify helpers and consider decoupling from gizmo\n\n      if (handle.tag === 'helper') {\n        handle.visible = false;\n        if (handle.name === 'AXIS') {\n          handle.visible = !!this.axis;\n          if (this.axis === 'X') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, 0));\n            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);\n            if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false;\n            }\n          }\n          if (this.axis === 'Y') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, Math.PI / 2));\n            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);\n            if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false;\n            }\n          }\n          if (this.axis === 'Z') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));\n            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);\n            if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false;\n            }\n          }\n          if (this.axis === 'XYZE') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));\n            _alignVector.copy(this.rotationAxis);\n            handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(_zeroVector, _alignVector, _unitY));\n            handle.quaternion.multiply(_tempQuaternion);\n            handle.visible = this.dragging;\n          }\n          if (this.axis === 'E') {\n            handle.visible = false;\n          }\n        } else if (handle.name === 'START') {\n          handle.position.copy(this.worldPositionStart);\n          handle.visible = this.dragging;\n        } else if (handle.name === 'END') {\n          handle.position.copy(this.worldPosition);\n          handle.visible = this.dragging;\n        } else if (handle.name === 'DELTA') {\n          handle.position.copy(this.worldPositionStart);\n          handle.quaternion.copy(this.worldQuaternionStart);\n          _tempVector.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);\n          _tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());\n          handle.scale.copy(_tempVector);\n          handle.visible = this.dragging;\n        } else {\n          handle.quaternion.copy(quaternion);\n          if (this.dragging) {\n            handle.position.copy(this.worldPositionStart);\n          } else {\n            handle.position.copy(this.worldPosition);\n          }\n          if (this.axis) {\n            handle.visible = this.axis.search(handle.name) !== -1;\n          }\n        }\n\n        // If updating helper, skip rest of the loop\n        continue;\n      }\n\n      // Align handles to current local or world rotation\n\n      handle.quaternion.copy(quaternion);\n      if (this.mode === 'translate' || this.mode === 'scale') {\n        // Hide translate and scale axis facing the camera\n\n        const AXIS_HIDE_THRESHOLD = 0.99;\n        const PLANE_HIDE_THRESHOLD = 0.2;\n        if (handle.name === 'X') {\n          if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'Y') {\n          if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'Z') {\n          if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'XY') {\n          if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'YZ') {\n          if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'XZ') {\n          if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n      } else if (this.mode === 'rotate') {\n        // Align handles to current local or world rotation\n\n        _tempQuaternion2.copy(quaternion);\n        _alignVector.copy(this.eye).applyQuaternion(_tempQuaternion.copy(quaternion).invert());\n        if (handle.name.search('E') !== -1) {\n          handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(this.eye, _zeroVector, _unitY));\n        }\n        if (handle.name === 'X') {\n          _tempQuaternion.setFromAxisAngle(_unitX, Math.atan2(-_alignVector.y, _alignVector.z));\n          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);\n          handle.quaternion.copy(_tempQuaternion);\n        }\n        if (handle.name === 'Y') {\n          _tempQuaternion.setFromAxisAngle(_unitY, Math.atan2(_alignVector.x, _alignVector.z));\n          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);\n          handle.quaternion.copy(_tempQuaternion);\n        }\n        if (handle.name === 'Z') {\n          _tempQuaternion.setFromAxisAngle(_unitZ, Math.atan2(_alignVector.y, _alignVector.x));\n          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);\n          handle.quaternion.copy(_tempQuaternion);\n        }\n      }\n\n      // Hide disabled axes\n      handle.visible = handle.visible && (handle.name.indexOf('X') === -1 || this.showX);\n      handle.visible = handle.visible && (handle.name.indexOf('Y') === -1 || this.showY);\n      handle.visible = handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ);\n      handle.visible = handle.visible && (handle.name.indexOf('E') === -1 || this.showX && this.showY && this.showZ);\n\n      // highlight selected axis\n\n      handle.material._color = handle.material._color || handle.material.color.clone();\n      handle.material._opacity = handle.material._opacity || handle.material.opacity;\n      handle.material.color.copy(handle.material._color);\n      handle.material.opacity = handle.material._opacity;\n      if (this.enabled && this.axis) {\n        if (handle.name === this.axis) {\n          handle.material.color.setHex(0xffff00);\n          handle.material.opacity = 1.0;\n        } else if (this.axis.split('').some(function (a) {\n          return handle.name === a;\n        })) {\n          handle.material.color.setHex(0xffff00);\n          handle.material.opacity = 1.0;\n        }\n      }\n    }\n    super.updateMatrixWorld(force);\n  }\n}\n\n//\n\nclass TransformControlsPlane extends Mesh {\n  constructor() {\n    super(new PlaneGeometry(100000, 100000, 2, 2), new MeshBasicMaterial({\n      visible: false,\n      wireframe: true,\n      side: DoubleSide,\n      transparent: true,\n      opacity: 0.1,\n      toneMapped: false\n    }));\n    this.isTransformControlsPlane = true;\n    this.type = 'TransformControlsPlane';\n  }\n  updateMatrixWorld(force) {\n    let space = this.space;\n    this.position.copy(this.worldPosition);\n    if (this.mode === 'scale') space = 'local'; // scale always oriented to local rotation\n\n    _v1.copy(_unitX).applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);\n    _v2.copy(_unitY).applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);\n    _v3.copy(_unitZ).applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);\n\n    // Align the plane for current transform mode, axis and space.\n\n    _alignVector.copy(_v2);\n    switch (this.mode) {\n      case 'translate':\n      case 'scale':\n        switch (this.axis) {\n          case 'X':\n            _alignVector.copy(this.eye).cross(_v1);\n            _dirVector.copy(_v1).cross(_alignVector);\n            break;\n          case 'Y':\n            _alignVector.copy(this.eye).cross(_v2);\n            _dirVector.copy(_v2).cross(_alignVector);\n            break;\n          case 'Z':\n            _alignVector.copy(this.eye).cross(_v3);\n            _dirVector.copy(_v3).cross(_alignVector);\n            break;\n          case 'XY':\n            _dirVector.copy(_v3);\n            break;\n          case 'YZ':\n            _dirVector.copy(_v1);\n            break;\n          case 'XZ':\n            _alignVector.copy(_v3);\n            _dirVector.copy(_v2);\n            break;\n          case 'XYZ':\n          case 'E':\n            _dirVector.set(0, 0, 0);\n            break;\n        }\n        break;\n      case 'rotate':\n      default:\n        // special case for rotate\n        _dirVector.set(0, 0, 0);\n    }\n    if (_dirVector.length() === 0) {\n      // If in rotate mode, make the plane parallel to camera\n      this.quaternion.copy(this.cameraQuaternion);\n    } else {\n      _tempMatrix.lookAt(_tempVector.set(0, 0, 0), _dirVector, _alignVector);\n      this.quaternion.setFromRotationMatrix(_tempMatrix);\n    }\n    super.updateMatrixWorld(force);\n  }\n}\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };"],
  "mappings": "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",
  "names": []
}
