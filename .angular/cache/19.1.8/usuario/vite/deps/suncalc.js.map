{
  "version": 3,
  "sources": ["../../../../../../node_modules/suncalc/suncalc.js"],
  "sourcesContent": ["/*\n (c) 2011-2015, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/moon position and light phases.\n https://github.com/mourner/suncalc\n*/\n\n(function () {\n  'use strict';\n\n  // shortcuts for easier to read formulas\n  var PI = Math.PI,\n    sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad = PI / 180;\n\n  // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n\n  // date/time constants and conversions\n\n  var dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n  function toJulian(date) {\n    return date.valueOf() / dayMs - 0.5 + J1970;\n  }\n  function fromJulian(j) {\n    return new Date((j + 0.5 - J1970) * dayMs);\n  }\n  function toDays(date) {\n    return toJulian(date) - J2000;\n  }\n\n  // general calculations for position\n\n  var e = rad * 23.4397; // obliquity of the Earth\n\n  function rightAscension(l, b) {\n    return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n  }\n  function declination(l, b) {\n    return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n  }\n  function azimuth(H, phi, dec) {\n    return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n  }\n  function altitude(H, phi, dec) {\n    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n  }\n  function siderealTime(d, lw) {\n    return rad * (280.16 + 360.9856235 * d) - lw;\n  }\n  function astroRefraction(h) {\n    if (h < 0)\n      // the following formula works for positive altitudes only.\n      h = 0; // if h = -0.08901179 a div/0 would occur.\n\n    // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n  }\n\n  // general sun calculations\n\n  function solarMeanAnomaly(d) {\n    return rad * (357.5291 + 0.98560028 * d);\n  }\n  function eclipticLongitude(M) {\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n      // equation of center\n      P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n  }\n  function sunCoords(d) {\n    var M = solarMeanAnomaly(d),\n      L = eclipticLongitude(M);\n    return {\n      dec: declination(L, 0),\n      ra: rightAscension(L, 0)\n    };\n  }\n  var SunCalc = {};\n\n  // calculates sun position for a given date and latitude/longitude\n\n  SunCalc.getPosition = function (date, lat, lng) {\n    var lw = rad * -lng,\n      phi = rad * lat,\n      d = toDays(date),\n      c = sunCoords(d),\n      H = siderealTime(d, lw) - c.ra;\n    return {\n      azimuth: azimuth(H, phi, c.dec),\n      altitude: altitude(H, phi, c.dec)\n    };\n  };\n\n  // sun times configuration (angle, morning name, evening name)\n\n  var times = SunCalc.times = [[-0.833, 'sunrise', 'sunset'], [-0.3, 'sunriseEnd', 'sunsetStart'], [-6, 'dawn', 'dusk'], [-12, 'nauticalDawn', 'nauticalDusk'], [-18, 'nightEnd', 'night'], [6, 'goldenHourEnd', 'goldenHour']];\n\n  // adds a custom time to the times config\n\n  SunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n  };\n\n  // calculations for sun times\n\n  var J0 = 0.0009;\n  function julianCycle(d, lw) {\n    return Math.round(d - J0 - lw / (2 * PI));\n  }\n  function approxTransit(Ht, lw, n) {\n    return J0 + (Ht + lw) / (2 * PI) + n;\n  }\n  function solarTransitJ(ds, M, L) {\n    return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);\n  }\n  function hourAngle(h, phi, d) {\n    return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d)));\n  }\n  function observerAngle(height) {\n    return -2.076 * Math.sqrt(height) / 60;\n  }\n\n  // returns set time for the given sun altitude\n  function getSetJ(h, lw, phi, dec, n, M, L) {\n    var w = hourAngle(h, phi, dec),\n      a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n  }\n\n  // calculates sun times for a given date, latitude/longitude, and, optionally,\n  // the observer height (in meters) relative to the horizon\n\n  SunCalc.getTimes = function (date, lat, lng, height) {\n    height = height || 0;\n    var lw = rad * -lng,\n      phi = rad * lat,\n      dh = observerAngle(height),\n      d = toDays(date),\n      n = julianCycle(d, lw),\n      ds = approxTransit(0, lw, n),\n      M = solarMeanAnomaly(ds),\n      L = eclipticLongitude(M),\n      dec = declination(L, 0),\n      Jnoon = solarTransitJ(ds, M, L),\n      i,\n      len,\n      time,\n      h0,\n      Jset,\n      Jrise;\n    var result = {\n      solarNoon: fromJulian(Jnoon),\n      nadir: fromJulian(Jnoon - 0.5)\n    };\n    for (i = 0, len = times.length; i < len; i += 1) {\n      time = times[i];\n      h0 = (time[0] + dh) * rad;\n      Jset = getSetJ(h0, lw, phi, dec, n, M, L);\n      Jrise = Jnoon - (Jset - Jnoon);\n      result[time[1]] = fromJulian(Jrise);\n      result[time[2]] = fromJulian(Jset);\n    }\n    return result;\n  };\n\n  // moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\n  function moonCoords(d) {\n    // geocentric ecliptic coordinates of the moon\n\n    var L = rad * (218.316 + 13.176396 * d),\n      // ecliptic longitude\n      M = rad * (134.963 + 13.064993 * d),\n      // mean anomaly\n      F = rad * (93.272 + 13.229350 * d),\n      // mean distance\n\n      l = L + rad * 6.289 * sin(M),\n      // longitude\n      b = rad * 5.128 * sin(F),\n      // latitude\n      dt = 385001 - 20905 * cos(M); // distance to the moon in km\n\n    return {\n      ra: rightAscension(l, b),\n      dec: declination(l, b),\n      dist: dt\n    };\n  }\n  SunCalc.getMoonPosition = function (date, lat, lng) {\n    var lw = rad * -lng,\n      phi = rad * lat,\n      d = toDays(date),\n      c = moonCoords(d),\n      H = siderealTime(d, lw) - c.ra,\n      h = altitude(H, phi, c.dec),\n      // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n      pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n    h = h + astroRefraction(h); // altitude correction for refraction\n\n    return {\n      azimuth: azimuth(H, phi, c.dec),\n      altitude: h,\n      distance: c.dist,\n      parallacticAngle: pa\n    };\n  };\n\n  // calculations for illumination parameters of the moon,\n  // based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n  // Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\n  SunCalc.getMoonIllumination = function (date) {\n    var d = toDays(date || new Date()),\n      s = sunCoords(d),\n      m = moonCoords(d),\n      sdist = 149598000,\n      // distance from Earth to Sun in km\n\n      phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n      inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n      angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) - cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n    return {\n      fraction: (1 + cos(inc)) / 2,\n      phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n      angle: angle\n    };\n  };\n  function hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n  }\n\n  // calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\n  SunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);else t.setHours(0, 0, 0, 0);\n    var hc = 0.133 * rad,\n      h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n      h1,\n      h2,\n      rise,\n      set,\n      a,\n      b,\n      xe,\n      ye,\n      d,\n      roots,\n      x1,\n      x2,\n      dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n      h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n      h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n      a = (h0 + h2) / 2 - h1;\n      b = (h2 - h0) / 2;\n      xe = -b / (2 * a);\n      ye = (a * xe + b) * xe + h1;\n      d = b * b - 4 * a * h1;\n      roots = 0;\n      if (d >= 0) {\n        dx = Math.sqrt(d) / (Math.abs(a) * 2);\n        x1 = xe - dx;\n        x2 = xe + dx;\n        if (Math.abs(x1) <= 1) roots++;\n        if (Math.abs(x2) <= 1) roots++;\n        if (x1 < -1) x1 = x2;\n      }\n      if (roots === 1) {\n        if (h0 < 0) rise = i + x1;else set = i + x1;\n      } else if (roots === 2) {\n        rise = i + (ye < 0 ? x2 : x1);\n        set = i + (ye < 0 ? x1 : x2);\n      }\n      if (rise && set) break;\n      h0 = h2;\n    }\n    var result = {};\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n    return result;\n  };\n\n  // export as Node module / AMD module / browser variable\n  if (typeof exports === 'object' && typeof module !== 'undefined') module.exports = SunCalc;else if (typeof define === 'function' && define.amd) define(SunCalc);else window.SunCalc = SunCalc;\n})();"],
  "mappings": "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",
  "names": []
}
